"""
Process a CSV file to calculate the total revenue generated by each customer,
write the results (including overall revenue) to a text file, and generate a pie chart
showing each customer's revenue as a percentage of the company's total revenue.
"""

#####################################
# Adjust sys.path to include the project root
#####################################

import sys
import pathlib

# Determine the project root (one level up from the scripts folder)
project_root = pathlib.Path(__file__).resolve().parent.parent
sys.path.append(str(project_root))

#####################################
# Import Modules
#####################################

import csv
from collections import defaultdict
import matplotlib.pyplot as plt

# Import the logger from our utils module
from utils.utils_logger import logger

#####################################
# Declare Global Variables
#####################################

# Folder paths for input and output
raw_data_folder: str = "data/raw"  # Contains CSV files (sales_data.csv, etc.)
processed_data_folder: str = "data/processed"  # Output folder for processed files

#####################################
# Define Functions
#####################################

def get_customer_total_revenue(file_path: pathlib.Path) -> list:
    """
    Analyze the CSV file to calculate the total revenue generated by each customer.
    
    Args:
        file_path (pathlib.Path): Path to the sales CSV file.
        
    Returns:
        list: List of tuples (CustomerID, total revenue).
    """
    try:
        customer_revenue = defaultdict(float)
        
        with file_path.open('r', encoding='utf-8-sig') as file:
            csv_reader = csv.DictReader(file)
            # Normalize column names
            csv_reader.fieldnames = [col.strip().replace("\xa0", "") for col in csv_reader.fieldnames]
            
            # Check for required columns
            if "CustomerID" not in csv_reader.fieldnames or "SaleAmount" not in csv_reader.fieldnames:
                logger.error(f"CSV missing required columns. Found headers: {csv_reader.fieldnames}")
                return []
            
            for row in csv_reader:
                customer_id = row.get("CustomerID", "").strip()
                sale_amount = row.get("SaleAmount", "").strip()
                if customer_id and sale_amount:
                    try:
                        sale_amount_value = float(sale_amount)
                        customer_revenue[customer_id] += sale_amount_value
                    except ValueError:
                        logger.warning(f"Invalid sale amount for customer {customer_id}: {sale_amount}")
                        continue
        
        # Convert the dictionary to a list of tuples (CustomerID, total revenue)
        revenue_list = [(customer, revenue) for customer, revenue in customer_revenue.items()]
        return revenue_list

    except Exception as e:
        logger.error(f"Error processing CSV file: {e}")
        return []


def produce_pie_chart(total_revenues: list, overall_total: float, output_path: pathlib.Path):
    """
    Produce a pie chart of customer total revenue as a percentage of overall revenue.
    
    Args:
        total_revenues (list): List of tuples (CustomerID, total revenue).
        overall_total (float): The overall total revenue.
        output_path (pathlib.Path): File path to save the pie chart image.
    """
    if not total_revenues or overall_total == 0:
        logger.error("Insufficient data to generate pie chart.")
        return
    
    # Extract customer IDs and revenue values
    customers = [cust for cust, _ in total_revenues]
    revenues = [rev for _, rev in total_revenues]
    
    # Create a pie chart. The autopct function shows each slice as a percentage of overall revenue.
    plt.figure(figsize=(8, 8))
    plt.pie(revenues, labels=customers, autopct='%1.1f%%', startangle=140)
    plt.title("Customer Revenue Distribution")
    plt.tight_layout()
    plt.savefig(output_path)
    plt.close()


def process_csv_file():
    """
    Process the sales CSV file to calculate and save the total revenue per customer,
    include the overall total revenue, and generate a pie chart of the results.
    """
    input_file = pathlib.Path(raw_data_folder, "sales_data.csv")
    output_txt = pathlib.Path(processed_data_folder, "customer_total_revenue.txt")
    output_img = pathlib.Path(processed_data_folder, "customer_total_revenue_pie.png")
    
    # Ensure the processed data folder exists
    output_txt.parent.mkdir(parents=True, exist_ok=True)
    
    total_revenues = get_customer_total_revenue(input_file)
    overall_total = sum(revenue for _, revenue in total_revenues)
    
    # Write the total revenue per customer and overall total to a text file
    with output_txt.open('w', encoding='utf-8') as file:
        file.write("Customer Total Revenue:\n")
        file.write("=" * 50 + "\n")
        file.write(f"{'CustomerID':<20}{'Total Revenue'}\n")
        file.write("=" * 50 + "\n")
        for customer, revenue in total_revenues:
            file.write(f"{customer:<20}{revenue:.2f}\n")
        file.write("=" * 50 + "\n")
        file.write(f"{'OVERALL TOTAL':<20}{overall_total:.2f}\n")
    
    logger.info(f"Processed CSV file: {input_file}, results saved to: {output_txt}")
    
    # Generate and save the pie chart
    produce_pie_chart(total_revenues, overall_total, output_img)
    logger.info(f"Pie chart saved to: {output_img}")

#####################################
# Main Execution
#####################################

if __name__ == "__main__":
    logger.info("Starting processing of customer total revenue...")
    process_csv_file()
    logger.info("Processing complete.")
